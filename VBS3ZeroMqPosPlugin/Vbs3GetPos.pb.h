// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Vbs3GetPos.proto

#ifndef PROTOBUF_Vbs3GetPos_2eproto__INCLUDED
#define PROTOBUF_Vbs3GetPos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace VBS3 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Vbs3GetPos_2eproto();
void protobuf_AssignDesc_Vbs3GetPos_2eproto();
void protobuf_ShutdownFile_Vbs3GetPos_2eproto();

class Position;

// ===================================================================

class Position : public ::google::protobuf::Message {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  void Swap(Position* other);

  // implements Message ----------------------------------------------

  Position* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // required float dir = 4;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 4;
  inline float dir() const;
  inline void set_dir(float value);

  // required float dirVisual = 5;
  inline bool has_dirvisual() const;
  inline void clear_dirvisual();
  static const int kDirVisualFieldNumber = 5;
  inline float dirvisual() const;
  inline void set_dirvisual(float value);

  // optional float deltaT = 6;
  inline bool has_deltat() const;
  inline void clear_deltat();
  static const int kDeltaTFieldNumber = 6;
  inline float deltat() const;
  inline void set_deltat(float value);

  // optional string id = 7;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 7;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:VBS3.Position)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_dirvisual();
  inline void clear_has_dirvisual();
  inline void set_has_deltat();
  inline void clear_has_deltat();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  float dir_;
  float dirvisual_;
  float deltat_;
  ::std::string* id_;
  friend void  protobuf_AddDesc_Vbs3GetPos_2eproto();
  friend void protobuf_AssignDesc_Vbs3GetPos_2eproto();
  friend void protobuf_ShutdownFile_Vbs3GetPos_2eproto();

  void InitAsDefaultInstance();
  static Position* default_instance_;
};
// ===================================================================


// ===================================================================

// Position

// required float x = 1;
inline bool Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Position::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:VBS3.Position.x)
  return x_;
}
inline void Position::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:VBS3.Position.x)
}

// required float y = 2;
inline bool Position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Position::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Position::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Position::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:VBS3.Position.y)
  return y_;
}
inline void Position::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:VBS3.Position.y)
}

// required float z = 3;
inline bool Position::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Position::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Position::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Position::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:VBS3.Position.z)
  return z_;
}
inline void Position::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:VBS3.Position.z)
}

// required float dir = 4;
inline bool Position::has_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Position::set_has_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Position::clear_has_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Position::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float Position::dir() const {
  // @@protoc_insertion_point(field_get:VBS3.Position.dir)
  return dir_;
}
inline void Position::set_dir(float value) {
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:VBS3.Position.dir)
}

// required float dirVisual = 5;
inline bool Position::has_dirvisual() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Position::set_has_dirvisual() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Position::clear_has_dirvisual() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Position::clear_dirvisual() {
  dirvisual_ = 0;
  clear_has_dirvisual();
}
inline float Position::dirvisual() const {
  // @@protoc_insertion_point(field_get:VBS3.Position.dirVisual)
  return dirvisual_;
}
inline void Position::set_dirvisual(float value) {
  set_has_dirvisual();
  dirvisual_ = value;
  // @@protoc_insertion_point(field_set:VBS3.Position.dirVisual)
}

// optional float deltaT = 6;
inline bool Position::has_deltat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Position::set_has_deltat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Position::clear_has_deltat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Position::clear_deltat() {
  deltat_ = 0;
  clear_has_deltat();
}
inline float Position::deltat() const {
  // @@protoc_insertion_point(field_get:VBS3.Position.deltaT)
  return deltat_;
}
inline void Position::set_deltat(float value) {
  set_has_deltat();
  deltat_ = value;
  // @@protoc_insertion_point(field_set:VBS3.Position.deltaT)
}

// optional string id = 7;
inline bool Position::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Position::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Position::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Position::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Position::id() const {
  // @@protoc_insertion_point(field_get:VBS3.Position.id)
  return *id_;
}
inline void Position::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:VBS3.Position.id)
}
inline void Position::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:VBS3.Position.id)
}
inline void Position::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VBS3.Position.id)
}
inline ::std::string* Position::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VBS3.Position.id)
  return id_;
}
inline ::std::string* Position::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Position::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VBS3.Position.id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace VBS3

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Vbs3GetPos_2eproto__INCLUDED
