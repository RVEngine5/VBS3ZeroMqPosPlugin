// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TUIO.proto

#ifndef PROTOBUF_TUIO_2eproto__INCLUDED
#define PROTOBUF_TUIO_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace TUIO {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TUIO_2eproto();
void protobuf_AssignDesc_TUIO_2eproto();
void protobuf_ShutdownFile_TUIO_2eproto();

class Time;
class Cursor;
class Blob;
class Object;
class Point;

// ===================================================================

class Time : public ::google::protobuf::Message {
 public:
  Time();
  virtual ~Time();

  Time(const Time& from);

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Time& default_instance();

  void Swap(Time* other);

  // implements Message ----------------------------------------------

  Time* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 seconds = 1;
  inline bool has_seconds() const;
  inline void clear_seconds();
  static const int kSecondsFieldNumber = 1;
  inline ::google::protobuf::int64 seconds() const;
  inline void set_seconds(::google::protobuf::int64 value);

  // required int64 microseconds = 2;
  inline bool has_microseconds() const;
  inline void clear_microseconds();
  static const int kMicrosecondsFieldNumber = 2;
  inline ::google::protobuf::int64 microseconds() const;
  inline void set_microseconds(::google::protobuf::int64 value);

  // required int64 frameID = 3;
  inline bool has_frameid() const;
  inline void clear_frameid();
  static const int kFrameIDFieldNumber = 3;
  inline ::google::protobuf::int64 frameid() const;
  inline void set_frameid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TUIO.Time)
 private:
  inline void set_has_seconds();
  inline void clear_has_seconds();
  inline void set_has_microseconds();
  inline void clear_has_microseconds();
  inline void set_has_frameid();
  inline void clear_has_frameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 seconds_;
  ::google::protobuf::int64 microseconds_;
  ::google::protobuf::int64 frameid_;
  friend void  protobuf_AddDesc_TUIO_2eproto();
  friend void protobuf_AssignDesc_TUIO_2eproto();
  friend void protobuf_ShutdownFile_TUIO_2eproto();

  void InitAsDefaultInstance();
  static Time* default_instance_;
};
// -------------------------------------------------------------------

class Cursor : public ::google::protobuf::Message {
 public:
  Cursor();
  virtual ~Cursor();

  Cursor(const Cursor& from);

  inline Cursor& operator=(const Cursor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cursor& default_instance();

  void Swap(Cursor* other);

  // implements Message ----------------------------------------------

  Cursor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cursor& from);
  void MergeFrom(const Cursor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional .TUIO.Time tuioTime = 3;
  inline bool has_tuiotime() const;
  inline void clear_tuiotime();
  static const int kTuioTimeFieldNumber = 3;
  inline const ::TUIO::Time& tuiotime() const;
  inline ::TUIO::Time* mutable_tuiotime();
  inline ::TUIO::Time* release_tuiotime();
  inline void set_allocated_tuiotime(::TUIO::Time* tuiotime);

  // optional .TUIO.Time startTime = 4;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  inline const ::TUIO::Time& starttime() const;
  inline ::TUIO::Time* mutable_starttime();
  inline ::TUIO::Time* release_starttime();
  inline void set_allocated_starttime(::TUIO::Time* starttime);

  // required int64 sessionID = 5;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIDFieldNumber = 5;
  inline ::google::protobuf::int64 sessionid() const;
  inline void set_sessionid(::google::protobuf::int64 value);

  // optional float xSpeed = 6;
  inline bool has_xspeed() const;
  inline void clear_xspeed();
  static const int kXSpeedFieldNumber = 6;
  inline float xspeed() const;
  inline void set_xspeed(float value);

  // optional float ySpeed = 7;
  inline bool has_yspeed() const;
  inline void clear_yspeed();
  static const int kYSpeedFieldNumber = 7;
  inline float yspeed() const;
  inline void set_yspeed(float value);

  // optional float motionSpeed = 8;
  inline bool has_motionspeed() const;
  inline void clear_motionspeed();
  static const int kMotionSpeedFieldNumber = 8;
  inline float motionspeed() const;
  inline void set_motionspeed(float value);

  // optional float motionAccel = 9;
  inline bool has_motionaccel() const;
  inline void clear_motionaccel();
  static const int kMotionAccelFieldNumber = 9;
  inline float motionaccel() const;
  inline void set_motionaccel(float value);

  // repeated .TUIO.Point path = 10;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 10;
  inline const ::TUIO::Point& path(int index) const;
  inline ::TUIO::Point* mutable_path(int index);
  inline ::TUIO::Point* add_path();
  inline const ::google::protobuf::RepeatedPtrField< ::TUIO::Point >&
      path() const;
  inline ::google::protobuf::RepeatedPtrField< ::TUIO::Point >*
      mutable_path();

  // required int32 tuioState = 11;
  inline bool has_tuiostate() const;
  inline void clear_tuiostate();
  static const int kTuioStateFieldNumber = 11;
  inline ::google::protobuf::int32 tuiostate() const;
  inline void set_tuiostate(::google::protobuf::int32 value);

  // required int32 cursorID = 12;
  inline bool has_cursorid() const;
  inline void clear_cursorid();
  static const int kCursorIDFieldNumber = 12;
  inline ::google::protobuf::int32 cursorid() const;
  inline void set_cursorid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TUIO.Cursor)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_tuiotime();
  inline void clear_has_tuiotime();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_xspeed();
  inline void clear_has_xspeed();
  inline void set_has_yspeed();
  inline void clear_has_yspeed();
  inline void set_has_motionspeed();
  inline void clear_has_motionspeed();
  inline void set_has_motionaccel();
  inline void clear_has_motionaccel();
  inline void set_has_tuiostate();
  inline void clear_has_tuiostate();
  inline void set_has_cursorid();
  inline void clear_has_cursorid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  ::TUIO::Time* tuiotime_;
  ::TUIO::Time* starttime_;
  ::google::protobuf::int64 sessionid_;
  float xspeed_;
  float yspeed_;
  float motionspeed_;
  float motionaccel_;
  ::google::protobuf::RepeatedPtrField< ::TUIO::Point > path_;
  ::google::protobuf::int32 tuiostate_;
  ::google::protobuf::int32 cursorid_;
  friend void  protobuf_AddDesc_TUIO_2eproto();
  friend void protobuf_AssignDesc_TUIO_2eproto();
  friend void protobuf_ShutdownFile_TUIO_2eproto();

  void InitAsDefaultInstance();
  static Cursor* default_instance_;
};
// -------------------------------------------------------------------

class Blob : public ::google::protobuf::Message {
 public:
  Blob();
  virtual ~Blob();

  Blob(const Blob& from);

  inline Blob& operator=(const Blob& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Blob& default_instance();

  void Swap(Blob* other);

  // implements Message ----------------------------------------------

  Blob* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Blob& from);
  void MergeFrom(const Blob& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional .TUIO.Time tuioTime = 3;
  inline bool has_tuiotime() const;
  inline void clear_tuiotime();
  static const int kTuioTimeFieldNumber = 3;
  inline const ::TUIO::Time& tuiotime() const;
  inline ::TUIO::Time* mutable_tuiotime();
  inline ::TUIO::Time* release_tuiotime();
  inline void set_allocated_tuiotime(::TUIO::Time* tuiotime);

  // optional .TUIO.Time startTime = 4;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  inline const ::TUIO::Time& starttime() const;
  inline ::TUIO::Time* mutable_starttime();
  inline ::TUIO::Time* release_starttime();
  inline void set_allocated_starttime(::TUIO::Time* starttime);

  // required int64 sessionID = 5;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIDFieldNumber = 5;
  inline ::google::protobuf::int64 sessionid() const;
  inline void set_sessionid(::google::protobuf::int64 value);

  // optional float xSpeed = 6;
  inline bool has_xspeed() const;
  inline void clear_xspeed();
  static const int kXSpeedFieldNumber = 6;
  inline float xspeed() const;
  inline void set_xspeed(float value);

  // optional float ySpeed = 7;
  inline bool has_yspeed() const;
  inline void clear_yspeed();
  static const int kYSpeedFieldNumber = 7;
  inline float yspeed() const;
  inline void set_yspeed(float value);

  // optional float motionSpeed = 8;
  inline bool has_motionspeed() const;
  inline void clear_motionspeed();
  static const int kMotionSpeedFieldNumber = 8;
  inline float motionspeed() const;
  inline void set_motionspeed(float value);

  // optional float motionAccel = 9;
  inline bool has_motionaccel() const;
  inline void clear_motionaccel();
  static const int kMotionAccelFieldNumber = 9;
  inline float motionaccel() const;
  inline void set_motionaccel(float value);

  // repeated .TUIO.Point path = 10;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 10;
  inline const ::TUIO::Point& path(int index) const;
  inline ::TUIO::Point* mutable_path(int index);
  inline ::TUIO::Point* add_path();
  inline const ::google::protobuf::RepeatedPtrField< ::TUIO::Point >&
      path() const;
  inline ::google::protobuf::RepeatedPtrField< ::TUIO::Point >*
      mutable_path();

  // required int32 tuioState = 11;
  inline bool has_tuiostate() const;
  inline void clear_tuiostate();
  static const int kTuioStateFieldNumber = 11;
  inline ::google::protobuf::int32 tuiostate() const;
  inline void set_tuiostate(::google::protobuf::int32 value);

  // required int32 blobID = 12;
  inline bool has_blobid() const;
  inline void clear_blobid();
  static const int kBlobIDFieldNumber = 12;
  inline ::google::protobuf::int32 blobid() const;
  inline void set_blobid(::google::protobuf::int32 value);

  // required float angle = 13;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 13;
  inline float angle() const;
  inline void set_angle(float value);

  // required float width = 14;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 14;
  inline float width() const;
  inline void set_width(float value);

  // required float height = 15;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 15;
  inline float height() const;
  inline void set_height(float value);

  // required float area = 16;
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 16;
  inline float area() const;
  inline void set_area(float value);

  // required float rotationSpeed = 17;
  inline bool has_rotationspeed() const;
  inline void clear_rotationspeed();
  static const int kRotationSpeedFieldNumber = 17;
  inline float rotationspeed() const;
  inline void set_rotationspeed(float value);

  // required float rotationAccel = 18;
  inline bool has_rotationaccel() const;
  inline void clear_rotationaccel();
  static const int kRotationAccelFieldNumber = 18;
  inline float rotationaccel() const;
  inline void set_rotationaccel(float value);

  // @@protoc_insertion_point(class_scope:TUIO.Blob)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_tuiotime();
  inline void clear_has_tuiotime();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_xspeed();
  inline void clear_has_xspeed();
  inline void set_has_yspeed();
  inline void clear_has_yspeed();
  inline void set_has_motionspeed();
  inline void clear_has_motionspeed();
  inline void set_has_motionaccel();
  inline void clear_has_motionaccel();
  inline void set_has_tuiostate();
  inline void clear_has_tuiostate();
  inline void set_has_blobid();
  inline void clear_has_blobid();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_area();
  inline void clear_has_area();
  inline void set_has_rotationspeed();
  inline void clear_has_rotationspeed();
  inline void set_has_rotationaccel();
  inline void clear_has_rotationaccel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  ::TUIO::Time* tuiotime_;
  ::TUIO::Time* starttime_;
  ::google::protobuf::int64 sessionid_;
  float xspeed_;
  float yspeed_;
  float motionspeed_;
  float motionaccel_;
  ::google::protobuf::RepeatedPtrField< ::TUIO::Point > path_;
  ::google::protobuf::int32 tuiostate_;
  ::google::protobuf::int32 blobid_;
  float angle_;
  float width_;
  float height_;
  float area_;
  float rotationspeed_;
  float rotationaccel_;
  friend void  protobuf_AddDesc_TUIO_2eproto();
  friend void protobuf_AssignDesc_TUIO_2eproto();
  friend void protobuf_ShutdownFile_TUIO_2eproto();

  void InitAsDefaultInstance();
  static Blob* default_instance_;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  void Swap(Object* other);

  // implements Message ----------------------------------------------

  Object* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional .TUIO.Time tuioTime = 3;
  inline bool has_tuiotime() const;
  inline void clear_tuiotime();
  static const int kTuioTimeFieldNumber = 3;
  inline const ::TUIO::Time& tuiotime() const;
  inline ::TUIO::Time* mutable_tuiotime();
  inline ::TUIO::Time* release_tuiotime();
  inline void set_allocated_tuiotime(::TUIO::Time* tuiotime);

  // optional .TUIO.Time startTime = 4;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  inline const ::TUIO::Time& starttime() const;
  inline ::TUIO::Time* mutable_starttime();
  inline ::TUIO::Time* release_starttime();
  inline void set_allocated_starttime(::TUIO::Time* starttime);

  // required int64 sessionID = 5;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIDFieldNumber = 5;
  inline ::google::protobuf::int64 sessionid() const;
  inline void set_sessionid(::google::protobuf::int64 value);

  // optional float xSpeed = 6;
  inline bool has_xspeed() const;
  inline void clear_xspeed();
  static const int kXSpeedFieldNumber = 6;
  inline float xspeed() const;
  inline void set_xspeed(float value);

  // optional float ySpeed = 7;
  inline bool has_yspeed() const;
  inline void clear_yspeed();
  static const int kYSpeedFieldNumber = 7;
  inline float yspeed() const;
  inline void set_yspeed(float value);

  // optional float motionSpeed = 8;
  inline bool has_motionspeed() const;
  inline void clear_motionspeed();
  static const int kMotionSpeedFieldNumber = 8;
  inline float motionspeed() const;
  inline void set_motionspeed(float value);

  // optional float motionAccel = 9;
  inline bool has_motionaccel() const;
  inline void clear_motionaccel();
  static const int kMotionAccelFieldNumber = 9;
  inline float motionaccel() const;
  inline void set_motionaccel(float value);

  // repeated .TUIO.Point path = 10;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 10;
  inline const ::TUIO::Point& path(int index) const;
  inline ::TUIO::Point* mutable_path(int index);
  inline ::TUIO::Point* add_path();
  inline const ::google::protobuf::RepeatedPtrField< ::TUIO::Point >&
      path() const;
  inline ::google::protobuf::RepeatedPtrField< ::TUIO::Point >*
      mutable_path();

  // required int32 tuioState = 11;
  inline bool has_tuiostate() const;
  inline void clear_tuiostate();
  static const int kTuioStateFieldNumber = 11;
  inline ::google::protobuf::int32 tuiostate() const;
  inline void set_tuiostate(::google::protobuf::int32 value);

  // required int32 symbolID = 12;
  inline bool has_symbolid() const;
  inline void clear_symbolid();
  static const int kSymbolIDFieldNumber = 12;
  inline ::google::protobuf::int32 symbolid() const;
  inline void set_symbolid(::google::protobuf::int32 value);

  // required float angle = 13;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 13;
  inline float angle() const;
  inline void set_angle(float value);

  // required float rotationSpeed = 14;
  inline bool has_rotationspeed() const;
  inline void clear_rotationspeed();
  static const int kRotationSpeedFieldNumber = 14;
  inline float rotationspeed() const;
  inline void set_rotationspeed(float value);

  // required float rotationAccel = 15;
  inline bool has_rotationaccel() const;
  inline void clear_rotationaccel();
  static const int kRotationAccelFieldNumber = 15;
  inline float rotationaccel() const;
  inline void set_rotationaccel(float value);

  // @@protoc_insertion_point(class_scope:TUIO.Object)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_tuiotime();
  inline void clear_has_tuiotime();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_xspeed();
  inline void clear_has_xspeed();
  inline void set_has_yspeed();
  inline void clear_has_yspeed();
  inline void set_has_motionspeed();
  inline void clear_has_motionspeed();
  inline void set_has_motionaccel();
  inline void clear_has_motionaccel();
  inline void set_has_tuiostate();
  inline void clear_has_tuiostate();
  inline void set_has_symbolid();
  inline void clear_has_symbolid();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_rotationspeed();
  inline void clear_has_rotationspeed();
  inline void set_has_rotationaccel();
  inline void clear_has_rotationaccel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  ::TUIO::Time* tuiotime_;
  ::TUIO::Time* starttime_;
  ::google::protobuf::int64 sessionid_;
  float xspeed_;
  float yspeed_;
  float motionspeed_;
  float motionaccel_;
  ::google::protobuf::RepeatedPtrField< ::TUIO::Point > path_;
  ::google::protobuf::int32 tuiostate_;
  ::google::protobuf::int32 symbolid_;
  float angle_;
  float rotationspeed_;
  float rotationaccel_;
  friend void  protobuf_AddDesc_TUIO_2eproto();
  friend void protobuf_AssignDesc_TUIO_2eproto();
  friend void protobuf_ShutdownFile_TUIO_2eproto();

  void InitAsDefaultInstance();
  static Object* default_instance_;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional .TUIO.Time tuioTime = 3;
  inline bool has_tuiotime() const;
  inline void clear_tuiotime();
  static const int kTuioTimeFieldNumber = 3;
  inline const ::TUIO::Time& tuiotime() const;
  inline ::TUIO::Time* mutable_tuiotime();
  inline ::TUIO::Time* release_tuiotime();
  inline void set_allocated_tuiotime(::TUIO::Time* tuiotime);

  // optional .TUIO.Time startTime = 4;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  inline const ::TUIO::Time& starttime() const;
  inline ::TUIO::Time* mutable_starttime();
  inline ::TUIO::Time* release_starttime();
  inline void set_allocated_starttime(::TUIO::Time* starttime);

  // @@protoc_insertion_point(class_scope:TUIO.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_tuiotime();
  inline void clear_has_tuiotime();
  inline void set_has_starttime();
  inline void clear_has_starttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  ::TUIO::Time* tuiotime_;
  ::TUIO::Time* starttime_;
  friend void  protobuf_AddDesc_TUIO_2eproto();
  friend void protobuf_AssignDesc_TUIO_2eproto();
  friend void protobuf_ShutdownFile_TUIO_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// ===================================================================


// ===================================================================

// Time

// required int64 seconds = 1;
inline bool Time::has_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Time::set_has_seconds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Time::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Time::clear_seconds() {
  seconds_ = GOOGLE_LONGLONG(0);
  clear_has_seconds();
}
inline ::google::protobuf::int64 Time::seconds() const {
  // @@protoc_insertion_point(field_get:TUIO.Time.seconds)
  return seconds_;
}
inline void Time::set_seconds(::google::protobuf::int64 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Time.seconds)
}

// required int64 microseconds = 2;
inline bool Time::has_microseconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Time::set_has_microseconds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Time::clear_has_microseconds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Time::clear_microseconds() {
  microseconds_ = GOOGLE_LONGLONG(0);
  clear_has_microseconds();
}
inline ::google::protobuf::int64 Time::microseconds() const {
  // @@protoc_insertion_point(field_get:TUIO.Time.microseconds)
  return microseconds_;
}
inline void Time::set_microseconds(::google::protobuf::int64 value) {
  set_has_microseconds();
  microseconds_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Time.microseconds)
}

// required int64 frameID = 3;
inline bool Time::has_frameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Time::set_has_frameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Time::clear_has_frameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Time::clear_frameid() {
  frameid_ = GOOGLE_LONGLONG(0);
  clear_has_frameid();
}
inline ::google::protobuf::int64 Time::frameid() const {
  // @@protoc_insertion_point(field_get:TUIO.Time.frameID)
  return frameid_;
}
inline void Time::set_frameid(::google::protobuf::int64 value) {
  set_has_frameid();
  frameid_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Time.frameID)
}

// -------------------------------------------------------------------

// Cursor

// required float x = 1;
inline bool Cursor::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Cursor::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Cursor::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Cursor::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Cursor::x() const {
  // @@protoc_insertion_point(field_get:TUIO.Cursor.x)
  return x_;
}
inline void Cursor::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Cursor.x)
}

// required float y = 2;
inline bool Cursor::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Cursor::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Cursor::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Cursor::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Cursor::y() const {
  // @@protoc_insertion_point(field_get:TUIO.Cursor.y)
  return y_;
}
inline void Cursor::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Cursor.y)
}

// optional .TUIO.Time tuioTime = 3;
inline bool Cursor::has_tuiotime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Cursor::set_has_tuiotime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Cursor::clear_has_tuiotime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Cursor::clear_tuiotime() {
  if (tuiotime_ != NULL) tuiotime_->::TUIO::Time::Clear();
  clear_has_tuiotime();
}
inline const ::TUIO::Time& Cursor::tuiotime() const {
  // @@protoc_insertion_point(field_get:TUIO.Cursor.tuioTime)
  return tuiotime_ != NULL ? *tuiotime_ : *default_instance_->tuiotime_;
}
inline ::TUIO::Time* Cursor::mutable_tuiotime() {
  set_has_tuiotime();
  if (tuiotime_ == NULL) tuiotime_ = new ::TUIO::Time;
  // @@protoc_insertion_point(field_mutable:TUIO.Cursor.tuioTime)
  return tuiotime_;
}
inline ::TUIO::Time* Cursor::release_tuiotime() {
  clear_has_tuiotime();
  ::TUIO::Time* temp = tuiotime_;
  tuiotime_ = NULL;
  return temp;
}
inline void Cursor::set_allocated_tuiotime(::TUIO::Time* tuiotime) {
  delete tuiotime_;
  tuiotime_ = tuiotime;
  if (tuiotime) {
    set_has_tuiotime();
  } else {
    clear_has_tuiotime();
  }
  // @@protoc_insertion_point(field_set_allocated:TUIO.Cursor.tuioTime)
}

// optional .TUIO.Time startTime = 4;
inline bool Cursor::has_starttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Cursor::set_has_starttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Cursor::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Cursor::clear_starttime() {
  if (starttime_ != NULL) starttime_->::TUIO::Time::Clear();
  clear_has_starttime();
}
inline const ::TUIO::Time& Cursor::starttime() const {
  // @@protoc_insertion_point(field_get:TUIO.Cursor.startTime)
  return starttime_ != NULL ? *starttime_ : *default_instance_->starttime_;
}
inline ::TUIO::Time* Cursor::mutable_starttime() {
  set_has_starttime();
  if (starttime_ == NULL) starttime_ = new ::TUIO::Time;
  // @@protoc_insertion_point(field_mutable:TUIO.Cursor.startTime)
  return starttime_;
}
inline ::TUIO::Time* Cursor::release_starttime() {
  clear_has_starttime();
  ::TUIO::Time* temp = starttime_;
  starttime_ = NULL;
  return temp;
}
inline void Cursor::set_allocated_starttime(::TUIO::Time* starttime) {
  delete starttime_;
  starttime_ = starttime;
  if (starttime) {
    set_has_starttime();
  } else {
    clear_has_starttime();
  }
  // @@protoc_insertion_point(field_set_allocated:TUIO.Cursor.startTime)
}

// required int64 sessionID = 5;
inline bool Cursor::has_sessionid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Cursor::set_has_sessionid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Cursor::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Cursor::clear_sessionid() {
  sessionid_ = GOOGLE_LONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::int64 Cursor::sessionid() const {
  // @@protoc_insertion_point(field_get:TUIO.Cursor.sessionID)
  return sessionid_;
}
inline void Cursor::set_sessionid(::google::protobuf::int64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Cursor.sessionID)
}

// optional float xSpeed = 6;
inline bool Cursor::has_xspeed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Cursor::set_has_xspeed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Cursor::clear_has_xspeed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Cursor::clear_xspeed() {
  xspeed_ = 0;
  clear_has_xspeed();
}
inline float Cursor::xspeed() const {
  // @@protoc_insertion_point(field_get:TUIO.Cursor.xSpeed)
  return xspeed_;
}
inline void Cursor::set_xspeed(float value) {
  set_has_xspeed();
  xspeed_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Cursor.xSpeed)
}

// optional float ySpeed = 7;
inline bool Cursor::has_yspeed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Cursor::set_has_yspeed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Cursor::clear_has_yspeed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Cursor::clear_yspeed() {
  yspeed_ = 0;
  clear_has_yspeed();
}
inline float Cursor::yspeed() const {
  // @@protoc_insertion_point(field_get:TUIO.Cursor.ySpeed)
  return yspeed_;
}
inline void Cursor::set_yspeed(float value) {
  set_has_yspeed();
  yspeed_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Cursor.ySpeed)
}

// optional float motionSpeed = 8;
inline bool Cursor::has_motionspeed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Cursor::set_has_motionspeed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Cursor::clear_has_motionspeed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Cursor::clear_motionspeed() {
  motionspeed_ = 0;
  clear_has_motionspeed();
}
inline float Cursor::motionspeed() const {
  // @@protoc_insertion_point(field_get:TUIO.Cursor.motionSpeed)
  return motionspeed_;
}
inline void Cursor::set_motionspeed(float value) {
  set_has_motionspeed();
  motionspeed_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Cursor.motionSpeed)
}

// optional float motionAccel = 9;
inline bool Cursor::has_motionaccel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Cursor::set_has_motionaccel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Cursor::clear_has_motionaccel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Cursor::clear_motionaccel() {
  motionaccel_ = 0;
  clear_has_motionaccel();
}
inline float Cursor::motionaccel() const {
  // @@protoc_insertion_point(field_get:TUIO.Cursor.motionAccel)
  return motionaccel_;
}
inline void Cursor::set_motionaccel(float value) {
  set_has_motionaccel();
  motionaccel_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Cursor.motionAccel)
}

// repeated .TUIO.Point path = 10;
inline int Cursor::path_size() const {
  return path_.size();
}
inline void Cursor::clear_path() {
  path_.Clear();
}
inline const ::TUIO::Point& Cursor::path(int index) const {
  // @@protoc_insertion_point(field_get:TUIO.Cursor.path)
  return path_.Get(index);
}
inline ::TUIO::Point* Cursor::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:TUIO.Cursor.path)
  return path_.Mutable(index);
}
inline ::TUIO::Point* Cursor::add_path() {
  // @@protoc_insertion_point(field_add:TUIO.Cursor.path)
  return path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TUIO::Point >&
Cursor::path() const {
  // @@protoc_insertion_point(field_list:TUIO.Cursor.path)
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::TUIO::Point >*
Cursor::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:TUIO.Cursor.path)
  return &path_;
}

// required int32 tuioState = 11;
inline bool Cursor::has_tuiostate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Cursor::set_has_tuiostate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Cursor::clear_has_tuiostate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Cursor::clear_tuiostate() {
  tuiostate_ = 0;
  clear_has_tuiostate();
}
inline ::google::protobuf::int32 Cursor::tuiostate() const {
  // @@protoc_insertion_point(field_get:TUIO.Cursor.tuioState)
  return tuiostate_;
}
inline void Cursor::set_tuiostate(::google::protobuf::int32 value) {
  set_has_tuiostate();
  tuiostate_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Cursor.tuioState)
}

// required int32 cursorID = 12;
inline bool Cursor::has_cursorid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Cursor::set_has_cursorid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Cursor::clear_has_cursorid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Cursor::clear_cursorid() {
  cursorid_ = 0;
  clear_has_cursorid();
}
inline ::google::protobuf::int32 Cursor::cursorid() const {
  // @@protoc_insertion_point(field_get:TUIO.Cursor.cursorID)
  return cursorid_;
}
inline void Cursor::set_cursorid(::google::protobuf::int32 value) {
  set_has_cursorid();
  cursorid_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Cursor.cursorID)
}

// -------------------------------------------------------------------

// Blob

// required float x = 1;
inline bool Blob::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Blob::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Blob::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Blob::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Blob::x() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.x)
  return x_;
}
inline void Blob::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Blob.x)
}

// required float y = 2;
inline bool Blob::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Blob::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Blob::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Blob::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Blob::y() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.y)
  return y_;
}
inline void Blob::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Blob.y)
}

// optional .TUIO.Time tuioTime = 3;
inline bool Blob::has_tuiotime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Blob::set_has_tuiotime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Blob::clear_has_tuiotime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Blob::clear_tuiotime() {
  if (tuiotime_ != NULL) tuiotime_->::TUIO::Time::Clear();
  clear_has_tuiotime();
}
inline const ::TUIO::Time& Blob::tuiotime() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.tuioTime)
  return tuiotime_ != NULL ? *tuiotime_ : *default_instance_->tuiotime_;
}
inline ::TUIO::Time* Blob::mutable_tuiotime() {
  set_has_tuiotime();
  if (tuiotime_ == NULL) tuiotime_ = new ::TUIO::Time;
  // @@protoc_insertion_point(field_mutable:TUIO.Blob.tuioTime)
  return tuiotime_;
}
inline ::TUIO::Time* Blob::release_tuiotime() {
  clear_has_tuiotime();
  ::TUIO::Time* temp = tuiotime_;
  tuiotime_ = NULL;
  return temp;
}
inline void Blob::set_allocated_tuiotime(::TUIO::Time* tuiotime) {
  delete tuiotime_;
  tuiotime_ = tuiotime;
  if (tuiotime) {
    set_has_tuiotime();
  } else {
    clear_has_tuiotime();
  }
  // @@protoc_insertion_point(field_set_allocated:TUIO.Blob.tuioTime)
}

// optional .TUIO.Time startTime = 4;
inline bool Blob::has_starttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Blob::set_has_starttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Blob::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Blob::clear_starttime() {
  if (starttime_ != NULL) starttime_->::TUIO::Time::Clear();
  clear_has_starttime();
}
inline const ::TUIO::Time& Blob::starttime() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.startTime)
  return starttime_ != NULL ? *starttime_ : *default_instance_->starttime_;
}
inline ::TUIO::Time* Blob::mutable_starttime() {
  set_has_starttime();
  if (starttime_ == NULL) starttime_ = new ::TUIO::Time;
  // @@protoc_insertion_point(field_mutable:TUIO.Blob.startTime)
  return starttime_;
}
inline ::TUIO::Time* Blob::release_starttime() {
  clear_has_starttime();
  ::TUIO::Time* temp = starttime_;
  starttime_ = NULL;
  return temp;
}
inline void Blob::set_allocated_starttime(::TUIO::Time* starttime) {
  delete starttime_;
  starttime_ = starttime;
  if (starttime) {
    set_has_starttime();
  } else {
    clear_has_starttime();
  }
  // @@protoc_insertion_point(field_set_allocated:TUIO.Blob.startTime)
}

// required int64 sessionID = 5;
inline bool Blob::has_sessionid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Blob::set_has_sessionid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Blob::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Blob::clear_sessionid() {
  sessionid_ = GOOGLE_LONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::int64 Blob::sessionid() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.sessionID)
  return sessionid_;
}
inline void Blob::set_sessionid(::google::protobuf::int64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Blob.sessionID)
}

// optional float xSpeed = 6;
inline bool Blob::has_xspeed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Blob::set_has_xspeed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Blob::clear_has_xspeed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Blob::clear_xspeed() {
  xspeed_ = 0;
  clear_has_xspeed();
}
inline float Blob::xspeed() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.xSpeed)
  return xspeed_;
}
inline void Blob::set_xspeed(float value) {
  set_has_xspeed();
  xspeed_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Blob.xSpeed)
}

// optional float ySpeed = 7;
inline bool Blob::has_yspeed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Blob::set_has_yspeed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Blob::clear_has_yspeed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Blob::clear_yspeed() {
  yspeed_ = 0;
  clear_has_yspeed();
}
inline float Blob::yspeed() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.ySpeed)
  return yspeed_;
}
inline void Blob::set_yspeed(float value) {
  set_has_yspeed();
  yspeed_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Blob.ySpeed)
}

// optional float motionSpeed = 8;
inline bool Blob::has_motionspeed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Blob::set_has_motionspeed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Blob::clear_has_motionspeed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Blob::clear_motionspeed() {
  motionspeed_ = 0;
  clear_has_motionspeed();
}
inline float Blob::motionspeed() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.motionSpeed)
  return motionspeed_;
}
inline void Blob::set_motionspeed(float value) {
  set_has_motionspeed();
  motionspeed_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Blob.motionSpeed)
}

// optional float motionAccel = 9;
inline bool Blob::has_motionaccel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Blob::set_has_motionaccel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Blob::clear_has_motionaccel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Blob::clear_motionaccel() {
  motionaccel_ = 0;
  clear_has_motionaccel();
}
inline float Blob::motionaccel() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.motionAccel)
  return motionaccel_;
}
inline void Blob::set_motionaccel(float value) {
  set_has_motionaccel();
  motionaccel_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Blob.motionAccel)
}

// repeated .TUIO.Point path = 10;
inline int Blob::path_size() const {
  return path_.size();
}
inline void Blob::clear_path() {
  path_.Clear();
}
inline const ::TUIO::Point& Blob::path(int index) const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.path)
  return path_.Get(index);
}
inline ::TUIO::Point* Blob::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:TUIO.Blob.path)
  return path_.Mutable(index);
}
inline ::TUIO::Point* Blob::add_path() {
  // @@protoc_insertion_point(field_add:TUIO.Blob.path)
  return path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TUIO::Point >&
Blob::path() const {
  // @@protoc_insertion_point(field_list:TUIO.Blob.path)
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::TUIO::Point >*
Blob::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:TUIO.Blob.path)
  return &path_;
}

// required int32 tuioState = 11;
inline bool Blob::has_tuiostate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Blob::set_has_tuiostate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Blob::clear_has_tuiostate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Blob::clear_tuiostate() {
  tuiostate_ = 0;
  clear_has_tuiostate();
}
inline ::google::protobuf::int32 Blob::tuiostate() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.tuioState)
  return tuiostate_;
}
inline void Blob::set_tuiostate(::google::protobuf::int32 value) {
  set_has_tuiostate();
  tuiostate_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Blob.tuioState)
}

// required int32 blobID = 12;
inline bool Blob::has_blobid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Blob::set_has_blobid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Blob::clear_has_blobid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Blob::clear_blobid() {
  blobid_ = 0;
  clear_has_blobid();
}
inline ::google::protobuf::int32 Blob::blobid() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.blobID)
  return blobid_;
}
inline void Blob::set_blobid(::google::protobuf::int32 value) {
  set_has_blobid();
  blobid_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Blob.blobID)
}

// required float angle = 13;
inline bool Blob::has_angle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Blob::set_has_angle() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Blob::clear_has_angle() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Blob::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline float Blob::angle() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.angle)
  return angle_;
}
inline void Blob::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Blob.angle)
}

// required float width = 14;
inline bool Blob::has_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Blob::set_has_width() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Blob::clear_has_width() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Blob::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float Blob::width() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.width)
  return width_;
}
inline void Blob::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Blob.width)
}

// required float height = 15;
inline bool Blob::has_height() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Blob::set_has_height() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Blob::clear_has_height() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Blob::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float Blob::height() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.height)
  return height_;
}
inline void Blob::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Blob.height)
}

// required float area = 16;
inline bool Blob::has_area() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Blob::set_has_area() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Blob::clear_has_area() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Blob::clear_area() {
  area_ = 0;
  clear_has_area();
}
inline float Blob::area() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.area)
  return area_;
}
inline void Blob::set_area(float value) {
  set_has_area();
  area_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Blob.area)
}

// required float rotationSpeed = 17;
inline bool Blob::has_rotationspeed() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Blob::set_has_rotationspeed() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Blob::clear_has_rotationspeed() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Blob::clear_rotationspeed() {
  rotationspeed_ = 0;
  clear_has_rotationspeed();
}
inline float Blob::rotationspeed() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.rotationSpeed)
  return rotationspeed_;
}
inline void Blob::set_rotationspeed(float value) {
  set_has_rotationspeed();
  rotationspeed_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Blob.rotationSpeed)
}

// required float rotationAccel = 18;
inline bool Blob::has_rotationaccel() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Blob::set_has_rotationaccel() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Blob::clear_has_rotationaccel() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Blob::clear_rotationaccel() {
  rotationaccel_ = 0;
  clear_has_rotationaccel();
}
inline float Blob::rotationaccel() const {
  // @@protoc_insertion_point(field_get:TUIO.Blob.rotationAccel)
  return rotationaccel_;
}
inline void Blob::set_rotationaccel(float value) {
  set_has_rotationaccel();
  rotationaccel_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Blob.rotationAccel)
}

// -------------------------------------------------------------------

// Object

// required float x = 1;
inline bool Object::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Object::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Object::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Object::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Object::x() const {
  // @@protoc_insertion_point(field_get:TUIO.Object.x)
  return x_;
}
inline void Object::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Object.x)
}

// required float y = 2;
inline bool Object::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Object::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Object::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Object::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Object::y() const {
  // @@protoc_insertion_point(field_get:TUIO.Object.y)
  return y_;
}
inline void Object::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Object.y)
}

// optional .TUIO.Time tuioTime = 3;
inline bool Object::has_tuiotime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Object::set_has_tuiotime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Object::clear_has_tuiotime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Object::clear_tuiotime() {
  if (tuiotime_ != NULL) tuiotime_->::TUIO::Time::Clear();
  clear_has_tuiotime();
}
inline const ::TUIO::Time& Object::tuiotime() const {
  // @@protoc_insertion_point(field_get:TUIO.Object.tuioTime)
  return tuiotime_ != NULL ? *tuiotime_ : *default_instance_->tuiotime_;
}
inline ::TUIO::Time* Object::mutable_tuiotime() {
  set_has_tuiotime();
  if (tuiotime_ == NULL) tuiotime_ = new ::TUIO::Time;
  // @@protoc_insertion_point(field_mutable:TUIO.Object.tuioTime)
  return tuiotime_;
}
inline ::TUIO::Time* Object::release_tuiotime() {
  clear_has_tuiotime();
  ::TUIO::Time* temp = tuiotime_;
  tuiotime_ = NULL;
  return temp;
}
inline void Object::set_allocated_tuiotime(::TUIO::Time* tuiotime) {
  delete tuiotime_;
  tuiotime_ = tuiotime;
  if (tuiotime) {
    set_has_tuiotime();
  } else {
    clear_has_tuiotime();
  }
  // @@protoc_insertion_point(field_set_allocated:TUIO.Object.tuioTime)
}

// optional .TUIO.Time startTime = 4;
inline bool Object::has_starttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Object::set_has_starttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Object::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Object::clear_starttime() {
  if (starttime_ != NULL) starttime_->::TUIO::Time::Clear();
  clear_has_starttime();
}
inline const ::TUIO::Time& Object::starttime() const {
  // @@protoc_insertion_point(field_get:TUIO.Object.startTime)
  return starttime_ != NULL ? *starttime_ : *default_instance_->starttime_;
}
inline ::TUIO::Time* Object::mutable_starttime() {
  set_has_starttime();
  if (starttime_ == NULL) starttime_ = new ::TUIO::Time;
  // @@protoc_insertion_point(field_mutable:TUIO.Object.startTime)
  return starttime_;
}
inline ::TUIO::Time* Object::release_starttime() {
  clear_has_starttime();
  ::TUIO::Time* temp = starttime_;
  starttime_ = NULL;
  return temp;
}
inline void Object::set_allocated_starttime(::TUIO::Time* starttime) {
  delete starttime_;
  starttime_ = starttime;
  if (starttime) {
    set_has_starttime();
  } else {
    clear_has_starttime();
  }
  // @@protoc_insertion_point(field_set_allocated:TUIO.Object.startTime)
}

// required int64 sessionID = 5;
inline bool Object::has_sessionid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Object::set_has_sessionid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Object::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Object::clear_sessionid() {
  sessionid_ = GOOGLE_LONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::int64 Object::sessionid() const {
  // @@protoc_insertion_point(field_get:TUIO.Object.sessionID)
  return sessionid_;
}
inline void Object::set_sessionid(::google::protobuf::int64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Object.sessionID)
}

// optional float xSpeed = 6;
inline bool Object::has_xspeed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Object::set_has_xspeed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Object::clear_has_xspeed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Object::clear_xspeed() {
  xspeed_ = 0;
  clear_has_xspeed();
}
inline float Object::xspeed() const {
  // @@protoc_insertion_point(field_get:TUIO.Object.xSpeed)
  return xspeed_;
}
inline void Object::set_xspeed(float value) {
  set_has_xspeed();
  xspeed_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Object.xSpeed)
}

// optional float ySpeed = 7;
inline bool Object::has_yspeed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Object::set_has_yspeed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Object::clear_has_yspeed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Object::clear_yspeed() {
  yspeed_ = 0;
  clear_has_yspeed();
}
inline float Object::yspeed() const {
  // @@protoc_insertion_point(field_get:TUIO.Object.ySpeed)
  return yspeed_;
}
inline void Object::set_yspeed(float value) {
  set_has_yspeed();
  yspeed_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Object.ySpeed)
}

// optional float motionSpeed = 8;
inline bool Object::has_motionspeed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Object::set_has_motionspeed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Object::clear_has_motionspeed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Object::clear_motionspeed() {
  motionspeed_ = 0;
  clear_has_motionspeed();
}
inline float Object::motionspeed() const {
  // @@protoc_insertion_point(field_get:TUIO.Object.motionSpeed)
  return motionspeed_;
}
inline void Object::set_motionspeed(float value) {
  set_has_motionspeed();
  motionspeed_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Object.motionSpeed)
}

// optional float motionAccel = 9;
inline bool Object::has_motionaccel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Object::set_has_motionaccel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Object::clear_has_motionaccel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Object::clear_motionaccel() {
  motionaccel_ = 0;
  clear_has_motionaccel();
}
inline float Object::motionaccel() const {
  // @@protoc_insertion_point(field_get:TUIO.Object.motionAccel)
  return motionaccel_;
}
inline void Object::set_motionaccel(float value) {
  set_has_motionaccel();
  motionaccel_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Object.motionAccel)
}

// repeated .TUIO.Point path = 10;
inline int Object::path_size() const {
  return path_.size();
}
inline void Object::clear_path() {
  path_.Clear();
}
inline const ::TUIO::Point& Object::path(int index) const {
  // @@protoc_insertion_point(field_get:TUIO.Object.path)
  return path_.Get(index);
}
inline ::TUIO::Point* Object::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:TUIO.Object.path)
  return path_.Mutable(index);
}
inline ::TUIO::Point* Object::add_path() {
  // @@protoc_insertion_point(field_add:TUIO.Object.path)
  return path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TUIO::Point >&
Object::path() const {
  // @@protoc_insertion_point(field_list:TUIO.Object.path)
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::TUIO::Point >*
Object::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:TUIO.Object.path)
  return &path_;
}

// required int32 tuioState = 11;
inline bool Object::has_tuiostate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Object::set_has_tuiostate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Object::clear_has_tuiostate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Object::clear_tuiostate() {
  tuiostate_ = 0;
  clear_has_tuiostate();
}
inline ::google::protobuf::int32 Object::tuiostate() const {
  // @@protoc_insertion_point(field_get:TUIO.Object.tuioState)
  return tuiostate_;
}
inline void Object::set_tuiostate(::google::protobuf::int32 value) {
  set_has_tuiostate();
  tuiostate_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Object.tuioState)
}

// required int32 symbolID = 12;
inline bool Object::has_symbolid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Object::set_has_symbolid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Object::clear_has_symbolid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Object::clear_symbolid() {
  symbolid_ = 0;
  clear_has_symbolid();
}
inline ::google::protobuf::int32 Object::symbolid() const {
  // @@protoc_insertion_point(field_get:TUIO.Object.symbolID)
  return symbolid_;
}
inline void Object::set_symbolid(::google::protobuf::int32 value) {
  set_has_symbolid();
  symbolid_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Object.symbolID)
}

// required float angle = 13;
inline bool Object::has_angle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Object::set_has_angle() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Object::clear_has_angle() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Object::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline float Object::angle() const {
  // @@protoc_insertion_point(field_get:TUIO.Object.angle)
  return angle_;
}
inline void Object::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Object.angle)
}

// required float rotationSpeed = 14;
inline bool Object::has_rotationspeed() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Object::set_has_rotationspeed() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Object::clear_has_rotationspeed() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Object::clear_rotationspeed() {
  rotationspeed_ = 0;
  clear_has_rotationspeed();
}
inline float Object::rotationspeed() const {
  // @@protoc_insertion_point(field_get:TUIO.Object.rotationSpeed)
  return rotationspeed_;
}
inline void Object::set_rotationspeed(float value) {
  set_has_rotationspeed();
  rotationspeed_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Object.rotationSpeed)
}

// required float rotationAccel = 15;
inline bool Object::has_rotationaccel() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Object::set_has_rotationaccel() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Object::clear_has_rotationaccel() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Object::clear_rotationaccel() {
  rotationaccel_ = 0;
  clear_has_rotationaccel();
}
inline float Object::rotationaccel() const {
  // @@protoc_insertion_point(field_get:TUIO.Object.rotationAccel)
  return rotationaccel_;
}
inline void Object::set_rotationaccel(float value) {
  set_has_rotationaccel();
  rotationaccel_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Object.rotationAccel)
}

// -------------------------------------------------------------------

// Point

// required float x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:TUIO.Point.x)
  return x_;
}
inline void Point::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Point.x)
}

// required float y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:TUIO.Point.y)
  return y_;
}
inline void Point::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:TUIO.Point.y)
}

// optional .TUIO.Time tuioTime = 3;
inline bool Point::has_tuiotime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point::set_has_tuiotime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point::clear_has_tuiotime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point::clear_tuiotime() {
  if (tuiotime_ != NULL) tuiotime_->::TUIO::Time::Clear();
  clear_has_tuiotime();
}
inline const ::TUIO::Time& Point::tuiotime() const {
  // @@protoc_insertion_point(field_get:TUIO.Point.tuioTime)
  return tuiotime_ != NULL ? *tuiotime_ : *default_instance_->tuiotime_;
}
inline ::TUIO::Time* Point::mutable_tuiotime() {
  set_has_tuiotime();
  if (tuiotime_ == NULL) tuiotime_ = new ::TUIO::Time;
  // @@protoc_insertion_point(field_mutable:TUIO.Point.tuioTime)
  return tuiotime_;
}
inline ::TUIO::Time* Point::release_tuiotime() {
  clear_has_tuiotime();
  ::TUIO::Time* temp = tuiotime_;
  tuiotime_ = NULL;
  return temp;
}
inline void Point::set_allocated_tuiotime(::TUIO::Time* tuiotime) {
  delete tuiotime_;
  tuiotime_ = tuiotime;
  if (tuiotime) {
    set_has_tuiotime();
  } else {
    clear_has_tuiotime();
  }
  // @@protoc_insertion_point(field_set_allocated:TUIO.Point.tuioTime)
}

// optional .TUIO.Time startTime = 4;
inline bool Point::has_starttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Point::set_has_starttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Point::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Point::clear_starttime() {
  if (starttime_ != NULL) starttime_->::TUIO::Time::Clear();
  clear_has_starttime();
}
inline const ::TUIO::Time& Point::starttime() const {
  // @@protoc_insertion_point(field_get:TUIO.Point.startTime)
  return starttime_ != NULL ? *starttime_ : *default_instance_->starttime_;
}
inline ::TUIO::Time* Point::mutable_starttime() {
  set_has_starttime();
  if (starttime_ == NULL) starttime_ = new ::TUIO::Time;
  // @@protoc_insertion_point(field_mutable:TUIO.Point.startTime)
  return starttime_;
}
inline ::TUIO::Time* Point::release_starttime() {
  clear_has_starttime();
  ::TUIO::Time* temp = starttime_;
  starttime_ = NULL;
  return temp;
}
inline void Point::set_allocated_starttime(::TUIO::Time* starttime) {
  delete starttime_;
  starttime_ = starttime;
  if (starttime) {
    set_has_starttime();
  } else {
    clear_has_starttime();
  }
  // @@protoc_insertion_point(field_set_allocated:TUIO.Point.startTime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TUIO

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TUIO_2eproto__INCLUDED
