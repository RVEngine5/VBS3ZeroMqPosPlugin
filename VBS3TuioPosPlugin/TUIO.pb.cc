// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TUIO.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TUIO.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TUIO {

namespace {

const ::google::protobuf::Descriptor* Time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Time_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cursor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cursor_reflection_ = NULL;
const ::google::protobuf::Descriptor* Blob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Blob_reflection_ = NULL;
const ::google::protobuf::Descriptor* Object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Object_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TUIO_2eproto() {
  protobuf_AddDesc_TUIO_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TUIO.proto");
  GOOGLE_CHECK(file != NULL);
  Time_descriptor_ = file->message_type(0);
  static const int Time_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, microseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, frameid_),
  };
  Time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Time_descriptor_,
      Time::default_instance_,
      Time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Time));
  Cursor_descriptor_ = file->message_type(1);
  static const int Cursor_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cursor, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cursor, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cursor, tuiotime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cursor, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cursor, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cursor, xspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cursor, yspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cursor, motionspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cursor, motionaccel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cursor, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cursor, tuiostate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cursor, cursorid_),
  };
  Cursor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cursor_descriptor_,
      Cursor::default_instance_,
      Cursor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cursor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cursor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cursor));
  Blob_descriptor_ = file->message_type(2);
  static const int Blob_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, tuiotime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, xspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, yspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, motionspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, motionaccel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, tuiostate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, blobid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, rotationspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, rotationaccel_),
  };
  Blob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Blob_descriptor_,
      Blob::default_instance_,
      Blob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Blob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Blob));
  Object_descriptor_ = file->message_type(3);
  static const int Object_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, tuiotime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, xspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, yspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, motionspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, motionaccel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, tuiostate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, symbolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, rotationspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, rotationaccel_),
  };
  Object_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Object_descriptor_,
      Object::default_instance_,
      Object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Object));
  Point_descriptor_ = file->message_type(4);
  static const int Point_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, tuiotime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, starttime_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TUIO_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Time_descriptor_, &Time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cursor_descriptor_, &Cursor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Blob_descriptor_, &Blob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Object_descriptor_, &Object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TUIO_2eproto() {
  delete Time::default_instance_;
  delete Time_reflection_;
  delete Cursor::default_instance_;
  delete Cursor_reflection_;
  delete Blob::default_instance_;
  delete Blob_reflection_;
  delete Object::default_instance_;
  delete Object_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
}

void protobuf_AddDesc_TUIO_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nTUIO.proto\022\004TUIO\">\n\004Time\022\017\n\007seconds\030\001 "
    "\002(\003\022\024\n\014microseconds\030\002 \002(\003\022\017\n\007frameID\030\003 \002"
    "(\003\"\370\001\n\006Cursor\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\034\n\010t"
    "uioTime\030\003 \001(\0132\n.TUIO.Time\022\035\n\tstartTime\030\004"
    " \001(\0132\n.TUIO.Time\022\021\n\tsessionID\030\005 \002(\003\022\016\n\006x"
    "Speed\030\006 \001(\002\022\016\n\006ySpeed\030\007 \001(\002\022\023\n\013motionSpe"
    "ed\030\010 \001(\002\022\023\n\013motionAccel\030\t \001(\002\022\031\n\004path\030\n "
    "\003(\0132\013.TUIO.Point\022\021\n\ttuioState\030\013 \002(\005\022\020\n\010c"
    "ursorID\030\014 \002(\005\"\336\002\n\004Blob\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002"
    " \002(\002\022\034\n\010tuioTime\030\003 \001(\0132\n.TUIO.Time\022\035\n\tst"
    "artTime\030\004 \001(\0132\n.TUIO.Time\022\021\n\tsessionID\030\005"
    " \002(\003\022\016\n\006xSpeed\030\006 \001(\002\022\016\n\006ySpeed\030\007 \001(\002\022\023\n\013"
    "motionSpeed\030\010 \001(\002\022\023\n\013motionAccel\030\t \001(\002\022\031"
    "\n\004path\030\n \003(\0132\013.TUIO.Point\022\021\n\ttuioState\030\013"
    " \002(\005\022\016\n\006blobID\030\014 \002(\005\022\r\n\005angle\030\r \002(\002\022\r\n\005w"
    "idth\030\016 \002(\002\022\016\n\006height\030\017 \002(\002\022\014\n\004area\030\020 \002(\002"
    "\022\025\n\rrotationSpeed\030\021 \002(\002\022\025\n\rrotationAccel"
    "\030\022 \002(\002\"\265\002\n\006Object\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022"
    "\034\n\010tuioTime\030\003 \001(\0132\n.TUIO.Time\022\035\n\tstartTi"
    "me\030\004 \001(\0132\n.TUIO.Time\022\021\n\tsessionID\030\005 \002(\003\022"
    "\016\n\006xSpeed\030\006 \001(\002\022\016\n\006ySpeed\030\007 \001(\002\022\023\n\013motio"
    "nSpeed\030\010 \001(\002\022\023\n\013motionAccel\030\t \001(\002\022\031\n\004pat"
    "h\030\n \003(\0132\013.TUIO.Point\022\021\n\ttuioState\030\013 \002(\005\022"
    "\020\n\010symbolID\030\014 \002(\005\022\r\n\005angle\030\r \002(\002\022\025\n\rrota"
    "tionSpeed\030\016 \002(\002\022\025\n\rrotationAccel\030\017 \002(\002\"Z"
    "\n\005Point\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\034\n\010tuioTim"
    "e\030\003 \001(\0132\n.TUIO.Time\022\035\n\tstartTime\030\004 \001(\0132\n"
    ".TUIO.TimeB$\n\026com.artistech.protobufB\nTu"
    "ioProtos", 1128);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TUIO.proto", &protobuf_RegisterTypes);
  Time::default_instance_ = new Time();
  Cursor::default_instance_ = new Cursor();
  Blob::default_instance_ = new Blob();
  Object::default_instance_ = new Object();
  Point::default_instance_ = new Point();
  Time::default_instance_->InitAsDefaultInstance();
  Cursor::default_instance_->InitAsDefaultInstance();
  Blob::default_instance_->InitAsDefaultInstance();
  Object::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TUIO_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TUIO_2eproto {
  StaticDescriptorInitializer_TUIO_2eproto() {
    protobuf_AddDesc_TUIO_2eproto();
  }
} static_descriptor_initializer_TUIO_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Time::kSecondsFieldNumber;
const int Time::kMicrosecondsFieldNumber;
const int Time::kFrameIDFieldNumber;
#endif  // !_MSC_VER

Time::Time()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TUIO.Time)
}

void Time::InitAsDefaultInstance() {
}

Time::Time(const Time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TUIO.Time)
}

void Time::SharedCtor() {
  _cached_size_ = 0;
  seconds_ = GOOGLE_LONGLONG(0);
  microseconds_ = GOOGLE_LONGLONG(0);
  frameid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:TUIO.Time)
  SharedDtor();
}

void Time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Time_descriptor_;
}

const Time& Time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TUIO_2eproto();
  return *default_instance_;
}

Time* Time::default_instance_ = NULL;

Time* Time::New() const {
  return new Time;
}

void Time::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Time*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seconds_, frameid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TUIO.Time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 seconds = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_microseconds;
        break;
      }

      // required int64 microseconds = 2;
      case 2: {
        if (tag == 16) {
         parse_microseconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &microseconds_)));
          set_has_microseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frameID;
        break;
      }

      // required int64 frameID = 3;
      case 3: {
        if (tag == 24) {
         parse_frameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TUIO.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TUIO.Time)
  return false;
#undef DO_
}

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TUIO.Time)
  // required int64 seconds = 1;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->seconds(), output);
  }

  // required int64 microseconds = 2;
  if (has_microseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->microseconds(), output);
  }

  // required int64 frameID = 3;
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->frameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TUIO.Time)
}

::google::protobuf::uint8* Time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TUIO.Time)
  // required int64 seconds = 1;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->seconds(), target);
  }

  // required int64 microseconds = 2;
  if (has_microseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->microseconds(), target);
  }

  // required int64 frameID = 3;
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->frameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TUIO.Time)
  return target;
}

int Time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 seconds = 1;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seconds());
    }

    // required int64 microseconds = 2;
    if (has_microseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->microseconds());
    }

    // required int64 frameID = 3;
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->frameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_microseconds()) {
      set_microseconds(from.microseconds());
    }
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Time::Swap(Time* other) {
  if (other != this) {
    std::swap(seconds_, other->seconds_);
    std::swap(microseconds_, other->microseconds_);
    std::swap(frameid_, other->frameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Time_descriptor_;
  metadata.reflection = Time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cursor::kXFieldNumber;
const int Cursor::kYFieldNumber;
const int Cursor::kTuioTimeFieldNumber;
const int Cursor::kStartTimeFieldNumber;
const int Cursor::kSessionIDFieldNumber;
const int Cursor::kXSpeedFieldNumber;
const int Cursor::kYSpeedFieldNumber;
const int Cursor::kMotionSpeedFieldNumber;
const int Cursor::kMotionAccelFieldNumber;
const int Cursor::kPathFieldNumber;
const int Cursor::kTuioStateFieldNumber;
const int Cursor::kCursorIDFieldNumber;
#endif  // !_MSC_VER

Cursor::Cursor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TUIO.Cursor)
}

void Cursor::InitAsDefaultInstance() {
  tuiotime_ = const_cast< ::TUIO::Time*>(&::TUIO::Time::default_instance());
  starttime_ = const_cast< ::TUIO::Time*>(&::TUIO::Time::default_instance());
}

Cursor::Cursor(const Cursor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TUIO.Cursor)
}

void Cursor::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  tuiotime_ = NULL;
  starttime_ = NULL;
  sessionid_ = GOOGLE_LONGLONG(0);
  xspeed_ = 0;
  yspeed_ = 0;
  motionspeed_ = 0;
  motionaccel_ = 0;
  tuiostate_ = 0;
  cursorid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cursor::~Cursor() {
  // @@protoc_insertion_point(destructor:TUIO.Cursor)
  SharedDtor();
}

void Cursor::SharedDtor() {
  if (this != default_instance_) {
    delete tuiotime_;
    delete starttime_;
  }
}

void Cursor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cursor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cursor_descriptor_;
}

const Cursor& Cursor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TUIO_2eproto();
  return *default_instance_;
}

Cursor* Cursor::default_instance_ = NULL;

Cursor* Cursor::New() const {
  return new Cursor;
}

void Cursor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Cursor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(x_, y_);
    ZR_(sessionid_, motionspeed_);
    if (has_tuiotime()) {
      if (tuiotime_ != NULL) tuiotime_->::TUIO::Time::Clear();
    }
    if (has_starttime()) {
      if (starttime_ != NULL) starttime_->::TUIO::Time::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3328) {
    ZR_(tuiostate_, cursorid_);
    motionaccel_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cursor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TUIO.Cursor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tuioTime;
        break;
      }

      // optional .TUIO.Time tuioTime = 3;
      case 3: {
        if (tag == 26) {
         parse_tuioTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuiotime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_startTime;
        break;
      }

      // optional .TUIO.Time startTime = 4;
      case 4: {
        if (tag == 34) {
         parse_startTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_starttime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sessionID;
        break;
      }

      // required int64 sessionID = 5;
      case 5: {
        if (tag == 40) {
         parse_sessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_xSpeed;
        break;
      }

      // optional float xSpeed = 6;
      case 6: {
        if (tag == 53) {
         parse_xSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xspeed_)));
          set_has_xspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_ySpeed;
        break;
      }

      // optional float ySpeed = 7;
      case 7: {
        if (tag == 61) {
         parse_ySpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yspeed_)));
          set_has_yspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_motionSpeed;
        break;
      }

      // optional float motionSpeed = 8;
      case 8: {
        if (tag == 69) {
         parse_motionSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motionspeed_)));
          set_has_motionspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_motionAccel;
        break;
      }

      // optional float motionAccel = 9;
      case 9: {
        if (tag == 77) {
         parse_motionAccel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motionaccel_)));
          set_has_motionaccel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_path;
        break;
      }

      // repeated .TUIO.Point path = 10;
      case 10: {
        if (tag == 82) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_path;
        if (input->ExpectTag(88)) goto parse_tuioState;
        break;
      }

      // required int32 tuioState = 11;
      case 11: {
        if (tag == 88) {
         parse_tuioState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tuiostate_)));
          set_has_tuiostate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_cursorID;
        break;
      }

      // required int32 cursorID = 12;
      case 12: {
        if (tag == 96) {
         parse_cursorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cursorid_)));
          set_has_cursorid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TUIO.Cursor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TUIO.Cursor)
  return false;
#undef DO_
}

void Cursor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TUIO.Cursor)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional .TUIO.Time tuioTime = 3;
  if (has_tuiotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tuiotime(), output);
  }

  // optional .TUIO.Time startTime = 4;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->starttime(), output);
  }

  // required int64 sessionID = 5;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sessionid(), output);
  }

  // optional float xSpeed = 6;
  if (has_xspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->xspeed(), output);
  }

  // optional float ySpeed = 7;
  if (has_yspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->yspeed(), output);
  }

  // optional float motionSpeed = 8;
  if (has_motionspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->motionspeed(), output);
  }

  // optional float motionAccel = 9;
  if (has_motionaccel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->motionaccel(), output);
  }

  // repeated .TUIO.Point path = 10;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->path(i), output);
  }

  // required int32 tuioState = 11;
  if (has_tuiostate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tuiostate(), output);
  }

  // required int32 cursorID = 12;
  if (has_cursorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cursorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TUIO.Cursor)
}

::google::protobuf::uint8* Cursor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TUIO.Cursor)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional .TUIO.Time tuioTime = 3;
  if (has_tuiotime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tuiotime(), target);
  }

  // optional .TUIO.Time startTime = 4;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->starttime(), target);
  }

  // required int64 sessionID = 5;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->sessionid(), target);
  }

  // optional float xSpeed = 6;
  if (has_xspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->xspeed(), target);
  }

  // optional float ySpeed = 7;
  if (has_yspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->yspeed(), target);
  }

  // optional float motionSpeed = 8;
  if (has_motionspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->motionspeed(), target);
  }

  // optional float motionAccel = 9;
  if (has_motionaccel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->motionaccel(), target);
  }

  // repeated .TUIO.Point path = 10;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->path(i), target);
  }

  // required int32 tuioState = 11;
  if (has_tuiostate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tuiostate(), target);
  }

  // required int32 cursorID = 12;
  if (has_cursorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cursorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TUIO.Cursor)
  return target;
}

int Cursor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional .TUIO.Time tuioTime = 3;
    if (has_tuiotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tuiotime());
    }

    // optional .TUIO.Time startTime = 4;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->starttime());
    }

    // required int64 sessionID = 5;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }

    // optional float xSpeed = 6;
    if (has_xspeed()) {
      total_size += 1 + 4;
    }

    // optional float ySpeed = 7;
    if (has_yspeed()) {
      total_size += 1 + 4;
    }

    // optional float motionSpeed = 8;
    if (has_motionspeed()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float motionAccel = 9;
    if (has_motionaccel()) {
      total_size += 1 + 4;
    }

    // required int32 tuioState = 11;
    if (has_tuiostate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tuiostate());
    }

    // required int32 cursorID = 12;
    if (has_cursorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cursorid());
    }

  }
  // repeated .TUIO.Point path = 10;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cursor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cursor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cursor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cursor::MergeFrom(const Cursor& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_tuiotime()) {
      mutable_tuiotime()->::TUIO::Time::MergeFrom(from.tuiotime());
    }
    if (from.has_starttime()) {
      mutable_starttime()->::TUIO::Time::MergeFrom(from.starttime());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_xspeed()) {
      set_xspeed(from.xspeed());
    }
    if (from.has_yspeed()) {
      set_yspeed(from.yspeed());
    }
    if (from.has_motionspeed()) {
      set_motionspeed(from.motionspeed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_motionaccel()) {
      set_motionaccel(from.motionaccel());
    }
    if (from.has_tuiostate()) {
      set_tuiostate(from.tuiostate());
    }
    if (from.has_cursorid()) {
      set_cursorid(from.cursorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cursor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cursor::CopyFrom(const Cursor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cursor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000c13) != 0x00000c13) return false;

  if (has_tuiotime()) {
    if (!this->tuiotime().IsInitialized()) return false;
  }
  if (has_starttime()) {
    if (!this->starttime().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->path())) return false;
  return true;
}

void Cursor::Swap(Cursor* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(tuiotime_, other->tuiotime_);
    std::swap(starttime_, other->starttime_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(xspeed_, other->xspeed_);
    std::swap(yspeed_, other->yspeed_);
    std::swap(motionspeed_, other->motionspeed_);
    std::swap(motionaccel_, other->motionaccel_);
    path_.Swap(&other->path_);
    std::swap(tuiostate_, other->tuiostate_);
    std::swap(cursorid_, other->cursorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cursor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cursor_descriptor_;
  metadata.reflection = Cursor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Blob::kXFieldNumber;
const int Blob::kYFieldNumber;
const int Blob::kTuioTimeFieldNumber;
const int Blob::kStartTimeFieldNumber;
const int Blob::kSessionIDFieldNumber;
const int Blob::kXSpeedFieldNumber;
const int Blob::kYSpeedFieldNumber;
const int Blob::kMotionSpeedFieldNumber;
const int Blob::kMotionAccelFieldNumber;
const int Blob::kPathFieldNumber;
const int Blob::kTuioStateFieldNumber;
const int Blob::kBlobIDFieldNumber;
const int Blob::kAngleFieldNumber;
const int Blob::kWidthFieldNumber;
const int Blob::kHeightFieldNumber;
const int Blob::kAreaFieldNumber;
const int Blob::kRotationSpeedFieldNumber;
const int Blob::kRotationAccelFieldNumber;
#endif  // !_MSC_VER

Blob::Blob()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TUIO.Blob)
}

void Blob::InitAsDefaultInstance() {
  tuiotime_ = const_cast< ::TUIO::Time*>(&::TUIO::Time::default_instance());
  starttime_ = const_cast< ::TUIO::Time*>(&::TUIO::Time::default_instance());
}

Blob::Blob(const Blob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TUIO.Blob)
}

void Blob::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  tuiotime_ = NULL;
  starttime_ = NULL;
  sessionid_ = GOOGLE_LONGLONG(0);
  xspeed_ = 0;
  yspeed_ = 0;
  motionspeed_ = 0;
  motionaccel_ = 0;
  tuiostate_ = 0;
  blobid_ = 0;
  angle_ = 0;
  width_ = 0;
  height_ = 0;
  area_ = 0;
  rotationspeed_ = 0;
  rotationaccel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Blob::~Blob() {
  // @@protoc_insertion_point(destructor:TUIO.Blob)
  SharedDtor();
}

void Blob::SharedDtor() {
  if (this != default_instance_) {
    delete tuiotime_;
    delete starttime_;
  }
}

void Blob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Blob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Blob_descriptor_;
}

const Blob& Blob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TUIO_2eproto();
  return *default_instance_;
}

Blob* Blob::default_instance_ = NULL;

Blob* Blob::New() const {
  return new Blob;
}

void Blob::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Blob*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(x_, y_);
    ZR_(sessionid_, motionspeed_);
    if (has_tuiotime()) {
      if (tuiotime_ != NULL) tuiotime_->::TUIO::Time::Clear();
    }
    if (has_starttime()) {
      if (starttime_ != NULL) starttime_->::TUIO::Time::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 64768) {
    ZR_(tuiostate_, area_);
    motionaccel_ = 0;
  }
  ZR_(rotationspeed_, rotationaccel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Blob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TUIO.Blob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tuioTime;
        break;
      }

      // optional .TUIO.Time tuioTime = 3;
      case 3: {
        if (tag == 26) {
         parse_tuioTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuiotime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_startTime;
        break;
      }

      // optional .TUIO.Time startTime = 4;
      case 4: {
        if (tag == 34) {
         parse_startTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_starttime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sessionID;
        break;
      }

      // required int64 sessionID = 5;
      case 5: {
        if (tag == 40) {
         parse_sessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_xSpeed;
        break;
      }

      // optional float xSpeed = 6;
      case 6: {
        if (tag == 53) {
         parse_xSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xspeed_)));
          set_has_xspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_ySpeed;
        break;
      }

      // optional float ySpeed = 7;
      case 7: {
        if (tag == 61) {
         parse_ySpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yspeed_)));
          set_has_yspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_motionSpeed;
        break;
      }

      // optional float motionSpeed = 8;
      case 8: {
        if (tag == 69) {
         parse_motionSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motionspeed_)));
          set_has_motionspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_motionAccel;
        break;
      }

      // optional float motionAccel = 9;
      case 9: {
        if (tag == 77) {
         parse_motionAccel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motionaccel_)));
          set_has_motionaccel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_path;
        break;
      }

      // repeated .TUIO.Point path = 10;
      case 10: {
        if (tag == 82) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_path;
        if (input->ExpectTag(88)) goto parse_tuioState;
        break;
      }

      // required int32 tuioState = 11;
      case 11: {
        if (tag == 88) {
         parse_tuioState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tuiostate_)));
          set_has_tuiostate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_blobID;
        break;
      }

      // required int32 blobID = 12;
      case 12: {
        if (tag == 96) {
         parse_blobID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blobid_)));
          set_has_blobid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_angle;
        break;
      }

      // required float angle = 13;
      case 13: {
        if (tag == 109) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_width;
        break;
      }

      // required float width = 14;
      case 14: {
        if (tag == 117) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_height;
        break;
      }

      // required float height = 15;
      case 15: {
        if (tag == 125) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_area;
        break;
      }

      // required float area = 16;
      case 16: {
        if (tag == 133) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_rotationSpeed;
        break;
      }

      // required float rotationSpeed = 17;
      case 17: {
        if (tag == 141) {
         parse_rotationSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotationspeed_)));
          set_has_rotationspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_rotationAccel;
        break;
      }

      // required float rotationAccel = 18;
      case 18: {
        if (tag == 149) {
         parse_rotationAccel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotationaccel_)));
          set_has_rotationaccel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TUIO.Blob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TUIO.Blob)
  return false;
#undef DO_
}

void Blob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TUIO.Blob)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional .TUIO.Time tuioTime = 3;
  if (has_tuiotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tuiotime(), output);
  }

  // optional .TUIO.Time startTime = 4;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->starttime(), output);
  }

  // required int64 sessionID = 5;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sessionid(), output);
  }

  // optional float xSpeed = 6;
  if (has_xspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->xspeed(), output);
  }

  // optional float ySpeed = 7;
  if (has_yspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->yspeed(), output);
  }

  // optional float motionSpeed = 8;
  if (has_motionspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->motionspeed(), output);
  }

  // optional float motionAccel = 9;
  if (has_motionaccel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->motionaccel(), output);
  }

  // repeated .TUIO.Point path = 10;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->path(i), output);
  }

  // required int32 tuioState = 11;
  if (has_tuiostate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tuiostate(), output);
  }

  // required int32 blobID = 12;
  if (has_blobid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->blobid(), output);
  }

  // required float angle = 13;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->angle(), output);
  }

  // required float width = 14;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->width(), output);
  }

  // required float height = 15;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->height(), output);
  }

  // required float area = 16;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->area(), output);
  }

  // required float rotationSpeed = 17;
  if (has_rotationspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->rotationspeed(), output);
  }

  // required float rotationAccel = 18;
  if (has_rotationaccel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->rotationaccel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TUIO.Blob)
}

::google::protobuf::uint8* Blob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TUIO.Blob)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional .TUIO.Time tuioTime = 3;
  if (has_tuiotime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tuiotime(), target);
  }

  // optional .TUIO.Time startTime = 4;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->starttime(), target);
  }

  // required int64 sessionID = 5;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->sessionid(), target);
  }

  // optional float xSpeed = 6;
  if (has_xspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->xspeed(), target);
  }

  // optional float ySpeed = 7;
  if (has_yspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->yspeed(), target);
  }

  // optional float motionSpeed = 8;
  if (has_motionspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->motionspeed(), target);
  }

  // optional float motionAccel = 9;
  if (has_motionaccel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->motionaccel(), target);
  }

  // repeated .TUIO.Point path = 10;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->path(i), target);
  }

  // required int32 tuioState = 11;
  if (has_tuiostate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tuiostate(), target);
  }

  // required int32 blobID = 12;
  if (has_blobid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->blobid(), target);
  }

  // required float angle = 13;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->angle(), target);
  }

  // required float width = 14;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->width(), target);
  }

  // required float height = 15;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->height(), target);
  }

  // required float area = 16;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->area(), target);
  }

  // required float rotationSpeed = 17;
  if (has_rotationspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->rotationspeed(), target);
  }

  // required float rotationAccel = 18;
  if (has_rotationaccel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->rotationaccel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TUIO.Blob)
  return target;
}

int Blob::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional .TUIO.Time tuioTime = 3;
    if (has_tuiotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tuiotime());
    }

    // optional .TUIO.Time startTime = 4;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->starttime());
    }

    // required int64 sessionID = 5;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }

    // optional float xSpeed = 6;
    if (has_xspeed()) {
      total_size += 1 + 4;
    }

    // optional float ySpeed = 7;
    if (has_yspeed()) {
      total_size += 1 + 4;
    }

    // optional float motionSpeed = 8;
    if (has_motionspeed()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float motionAccel = 9;
    if (has_motionaccel()) {
      total_size += 1 + 4;
    }

    // required int32 tuioState = 11;
    if (has_tuiostate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tuiostate());
    }

    // required int32 blobID = 12;
    if (has_blobid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blobid());
    }

    // required float angle = 13;
    if (has_angle()) {
      total_size += 1 + 4;
    }

    // required float width = 14;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // required float height = 15;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // required float area = 16;
    if (has_area()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required float rotationSpeed = 17;
    if (has_rotationspeed()) {
      total_size += 2 + 4;
    }

    // required float rotationAccel = 18;
    if (has_rotationaccel()) {
      total_size += 2 + 4;
    }

  }
  // repeated .TUIO.Point path = 10;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Blob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Blob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Blob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Blob::MergeFrom(const Blob& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_tuiotime()) {
      mutable_tuiotime()->::TUIO::Time::MergeFrom(from.tuiotime());
    }
    if (from.has_starttime()) {
      mutable_starttime()->::TUIO::Time::MergeFrom(from.starttime());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_xspeed()) {
      set_xspeed(from.xspeed());
    }
    if (from.has_yspeed()) {
      set_yspeed(from.yspeed());
    }
    if (from.has_motionspeed()) {
      set_motionspeed(from.motionspeed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_motionaccel()) {
      set_motionaccel(from.motionaccel());
    }
    if (from.has_tuiostate()) {
      set_tuiostate(from.tuiostate());
    }
    if (from.has_blobid()) {
      set_blobid(from.blobid());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rotationspeed()) {
      set_rotationspeed(from.rotationspeed());
    }
    if (from.has_rotationaccel()) {
      set_rotationaccel(from.rotationaccel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Blob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Blob::CopyFrom(const Blob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Blob::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003fc13) != 0x0003fc13) return false;

  if (has_tuiotime()) {
    if (!this->tuiotime().IsInitialized()) return false;
  }
  if (has_starttime()) {
    if (!this->starttime().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->path())) return false;
  return true;
}

void Blob::Swap(Blob* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(tuiotime_, other->tuiotime_);
    std::swap(starttime_, other->starttime_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(xspeed_, other->xspeed_);
    std::swap(yspeed_, other->yspeed_);
    std::swap(motionspeed_, other->motionspeed_);
    std::swap(motionaccel_, other->motionaccel_);
    path_.Swap(&other->path_);
    std::swap(tuiostate_, other->tuiostate_);
    std::swap(blobid_, other->blobid_);
    std::swap(angle_, other->angle_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(area_, other->area_);
    std::swap(rotationspeed_, other->rotationspeed_);
    std::swap(rotationaccel_, other->rotationaccel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Blob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Blob_descriptor_;
  metadata.reflection = Blob_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Object::kXFieldNumber;
const int Object::kYFieldNumber;
const int Object::kTuioTimeFieldNumber;
const int Object::kStartTimeFieldNumber;
const int Object::kSessionIDFieldNumber;
const int Object::kXSpeedFieldNumber;
const int Object::kYSpeedFieldNumber;
const int Object::kMotionSpeedFieldNumber;
const int Object::kMotionAccelFieldNumber;
const int Object::kPathFieldNumber;
const int Object::kTuioStateFieldNumber;
const int Object::kSymbolIDFieldNumber;
const int Object::kAngleFieldNumber;
const int Object::kRotationSpeedFieldNumber;
const int Object::kRotationAccelFieldNumber;
#endif  // !_MSC_VER

Object::Object()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TUIO.Object)
}

void Object::InitAsDefaultInstance() {
  tuiotime_ = const_cast< ::TUIO::Time*>(&::TUIO::Time::default_instance());
  starttime_ = const_cast< ::TUIO::Time*>(&::TUIO::Time::default_instance());
}

Object::Object(const Object& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TUIO.Object)
}

void Object::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  tuiotime_ = NULL;
  starttime_ = NULL;
  sessionid_ = GOOGLE_LONGLONG(0);
  xspeed_ = 0;
  yspeed_ = 0;
  motionspeed_ = 0;
  motionaccel_ = 0;
  tuiostate_ = 0;
  symbolid_ = 0;
  angle_ = 0;
  rotationspeed_ = 0;
  rotationaccel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:TUIO.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  if (this != default_instance_) {
    delete tuiotime_;
    delete starttime_;
  }
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_descriptor_;
}

const Object& Object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TUIO_2eproto();
  return *default_instance_;
}

Object* Object::default_instance_ = NULL;

Object* Object::New() const {
  return new Object;
}

void Object::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Object*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(x_, y_);
    ZR_(sessionid_, motionspeed_);
    if (has_tuiotime()) {
      if (tuiotime_ != NULL) tuiotime_->::TUIO::Time::Clear();
    }
    if (has_starttime()) {
      if (starttime_ != NULL) starttime_->::TUIO::Time::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32000) {
    ZR_(tuiostate_, rotationaccel_);
    motionaccel_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TUIO.Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tuioTime;
        break;
      }

      // optional .TUIO.Time tuioTime = 3;
      case 3: {
        if (tag == 26) {
         parse_tuioTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuiotime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_startTime;
        break;
      }

      // optional .TUIO.Time startTime = 4;
      case 4: {
        if (tag == 34) {
         parse_startTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_starttime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sessionID;
        break;
      }

      // required int64 sessionID = 5;
      case 5: {
        if (tag == 40) {
         parse_sessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_xSpeed;
        break;
      }

      // optional float xSpeed = 6;
      case 6: {
        if (tag == 53) {
         parse_xSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xspeed_)));
          set_has_xspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_ySpeed;
        break;
      }

      // optional float ySpeed = 7;
      case 7: {
        if (tag == 61) {
         parse_ySpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yspeed_)));
          set_has_yspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_motionSpeed;
        break;
      }

      // optional float motionSpeed = 8;
      case 8: {
        if (tag == 69) {
         parse_motionSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motionspeed_)));
          set_has_motionspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_motionAccel;
        break;
      }

      // optional float motionAccel = 9;
      case 9: {
        if (tag == 77) {
         parse_motionAccel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motionaccel_)));
          set_has_motionaccel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_path;
        break;
      }

      // repeated .TUIO.Point path = 10;
      case 10: {
        if (tag == 82) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_path;
        if (input->ExpectTag(88)) goto parse_tuioState;
        break;
      }

      // required int32 tuioState = 11;
      case 11: {
        if (tag == 88) {
         parse_tuioState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tuiostate_)));
          set_has_tuiostate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_symbolID;
        break;
      }

      // required int32 symbolID = 12;
      case 12: {
        if (tag == 96) {
         parse_symbolID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &symbolid_)));
          set_has_symbolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_angle;
        break;
      }

      // required float angle = 13;
      case 13: {
        if (tag == 109) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_rotationSpeed;
        break;
      }

      // required float rotationSpeed = 14;
      case 14: {
        if (tag == 117) {
         parse_rotationSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotationspeed_)));
          set_has_rotationspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_rotationAccel;
        break;
      }

      // required float rotationAccel = 15;
      case 15: {
        if (tag == 125) {
         parse_rotationAccel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotationaccel_)));
          set_has_rotationaccel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TUIO.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TUIO.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TUIO.Object)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional .TUIO.Time tuioTime = 3;
  if (has_tuiotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tuiotime(), output);
  }

  // optional .TUIO.Time startTime = 4;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->starttime(), output);
  }

  // required int64 sessionID = 5;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sessionid(), output);
  }

  // optional float xSpeed = 6;
  if (has_xspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->xspeed(), output);
  }

  // optional float ySpeed = 7;
  if (has_yspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->yspeed(), output);
  }

  // optional float motionSpeed = 8;
  if (has_motionspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->motionspeed(), output);
  }

  // optional float motionAccel = 9;
  if (has_motionaccel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->motionaccel(), output);
  }

  // repeated .TUIO.Point path = 10;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->path(i), output);
  }

  // required int32 tuioState = 11;
  if (has_tuiostate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tuiostate(), output);
  }

  // required int32 symbolID = 12;
  if (has_symbolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->symbolid(), output);
  }

  // required float angle = 13;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->angle(), output);
  }

  // required float rotationSpeed = 14;
  if (has_rotationspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->rotationspeed(), output);
  }

  // required float rotationAccel = 15;
  if (has_rotationaccel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->rotationaccel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TUIO.Object)
}

::google::protobuf::uint8* Object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TUIO.Object)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional .TUIO.Time tuioTime = 3;
  if (has_tuiotime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tuiotime(), target);
  }

  // optional .TUIO.Time startTime = 4;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->starttime(), target);
  }

  // required int64 sessionID = 5;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->sessionid(), target);
  }

  // optional float xSpeed = 6;
  if (has_xspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->xspeed(), target);
  }

  // optional float ySpeed = 7;
  if (has_yspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->yspeed(), target);
  }

  // optional float motionSpeed = 8;
  if (has_motionspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->motionspeed(), target);
  }

  // optional float motionAccel = 9;
  if (has_motionaccel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->motionaccel(), target);
  }

  // repeated .TUIO.Point path = 10;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->path(i), target);
  }

  // required int32 tuioState = 11;
  if (has_tuiostate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tuiostate(), target);
  }

  // required int32 symbolID = 12;
  if (has_symbolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->symbolid(), target);
  }

  // required float angle = 13;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->angle(), target);
  }

  // required float rotationSpeed = 14;
  if (has_rotationspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->rotationspeed(), target);
  }

  // required float rotationAccel = 15;
  if (has_rotationaccel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->rotationaccel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TUIO.Object)
  return target;
}

int Object::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional .TUIO.Time tuioTime = 3;
    if (has_tuiotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tuiotime());
    }

    // optional .TUIO.Time startTime = 4;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->starttime());
    }

    // required int64 sessionID = 5;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }

    // optional float xSpeed = 6;
    if (has_xspeed()) {
      total_size += 1 + 4;
    }

    // optional float ySpeed = 7;
    if (has_yspeed()) {
      total_size += 1 + 4;
    }

    // optional float motionSpeed = 8;
    if (has_motionspeed()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float motionAccel = 9;
    if (has_motionaccel()) {
      total_size += 1 + 4;
    }

    // required int32 tuioState = 11;
    if (has_tuiostate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tuiostate());
    }

    // required int32 symbolID = 12;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->symbolid());
    }

    // required float angle = 13;
    if (has_angle()) {
      total_size += 1 + 4;
    }

    // required float rotationSpeed = 14;
    if (has_rotationspeed()) {
      total_size += 1 + 4;
    }

    // required float rotationAccel = 15;
    if (has_rotationaccel()) {
      total_size += 1 + 4;
    }

  }
  // repeated .TUIO.Point path = 10;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Object* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Object*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_tuiotime()) {
      mutable_tuiotime()->::TUIO::Time::MergeFrom(from.tuiotime());
    }
    if (from.has_starttime()) {
      mutable_starttime()->::TUIO::Time::MergeFrom(from.starttime());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_xspeed()) {
      set_xspeed(from.xspeed());
    }
    if (from.has_yspeed()) {
      set_yspeed(from.yspeed());
    }
    if (from.has_motionspeed()) {
      set_motionspeed(from.motionspeed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_motionaccel()) {
      set_motionaccel(from.motionaccel());
    }
    if (from.has_tuiostate()) {
      set_tuiostate(from.tuiostate());
    }
    if (from.has_symbolid()) {
      set_symbolid(from.symbolid());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_rotationspeed()) {
      set_rotationspeed(from.rotationspeed());
    }
    if (from.has_rotationaccel()) {
      set_rotationaccel(from.rotationaccel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007c13) != 0x00007c13) return false;

  if (has_tuiotime()) {
    if (!this->tuiotime().IsInitialized()) return false;
  }
  if (has_starttime()) {
    if (!this->starttime().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->path())) return false;
  return true;
}

void Object::Swap(Object* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(tuiotime_, other->tuiotime_);
    std::swap(starttime_, other->starttime_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(xspeed_, other->xspeed_);
    std::swap(yspeed_, other->yspeed_);
    std::swap(motionspeed_, other->motionspeed_);
    std::swap(motionaccel_, other->motionaccel_);
    path_.Swap(&other->path_);
    std::swap(tuiostate_, other->tuiostate_);
    std::swap(symbolid_, other->symbolid_);
    std::swap(angle_, other->angle_);
    std::swap(rotationspeed_, other->rotationspeed_);
    std::swap(rotationaccel_, other->rotationaccel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Object_descriptor_;
  metadata.reflection = Object_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kTuioTimeFieldNumber;
const int Point::kStartTimeFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TUIO.Point)
}

void Point::InitAsDefaultInstance() {
  tuiotime_ = const_cast< ::TUIO::Time*>(&::TUIO::Time::default_instance());
  starttime_ = const_cast< ::TUIO::Time*>(&::TUIO::Time::default_instance());
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TUIO.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  tuiotime_ = NULL;
  starttime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:TUIO.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
    delete tuiotime_;
    delete starttime_;
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TUIO_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(x_, y_);
    if (has_tuiotime()) {
      if (tuiotime_ != NULL) tuiotime_->::TUIO::Time::Clear();
    }
    if (has_starttime()) {
      if (starttime_ != NULL) starttime_->::TUIO::Time::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TUIO.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tuioTime;
        break;
      }

      // optional .TUIO.Time tuioTime = 3;
      case 3: {
        if (tag == 26) {
         parse_tuioTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuiotime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_startTime;
        break;
      }

      // optional .TUIO.Time startTime = 4;
      case 4: {
        if (tag == 34) {
         parse_startTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_starttime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TUIO.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TUIO.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TUIO.Point)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional .TUIO.Time tuioTime = 3;
  if (has_tuiotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tuiotime(), output);
  }

  // optional .TUIO.Time startTime = 4;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->starttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TUIO.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TUIO.Point)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional .TUIO.Time tuioTime = 3;
  if (has_tuiotime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tuiotime(), target);
  }

  // optional .TUIO.Time startTime = 4;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->starttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TUIO.Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional .TUIO.Time tuioTime = 3;
    if (has_tuiotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tuiotime());
    }

    // optional .TUIO.Time startTime = 4;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->starttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_tuiotime()) {
      mutable_tuiotime()->::TUIO::Time::MergeFrom(from.tuiotime());
    }
    if (from.has_starttime()) {
      mutable_starttime()->::TUIO::Time::MergeFrom(from.starttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_tuiotime()) {
    if (!this->tuiotime().IsInitialized()) return false;
  }
  if (has_starttime()) {
    if (!this->starttime().IsInitialized()) return false;
  }
  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(tuiotime_, other->tuiotime_);
    std::swap(starttime_, other->starttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TUIO

// @@protoc_insertion_point(global_scope)
